/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hereisalexius.sp;

import com.thoughtworks.xstream.XStream;
import com.xeiam.xchart.Chart;
import com.xeiam.xchart.ChartBuilder;
import com.xeiam.xchart.StyleManager.ChartType;
import com.xeiam.xchart.StyleManager.LegendPosition;
import com.xeiam.xchart.XChartPanel;
import java.awt.FlowLayout;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.OpenOption;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import org.neuroph.core.NeuralNetwork;
import org.neuroph.core.data.DataSet;
import org.neuroph.core.learning.LearningRule;
import org.neuroph.nnet.MultiLayerPerceptron;
import org.neuroph.nnet.learning.BackPropagation;
import org.neuroph.nnet.learning.HopfieldLearning;
import org.neuroph.nnet.learning.LMS;
import org.neuroph.nnet.learning.MomentumBackpropagation;
import org.neuroph.nnet.learning.RBFLearning;
import org.neuroph.util.TransferFunctionType;
import yahoofinance.Stock;
import yahoofinance.YahooFinance;
import yahoofinance.histquotes.HistoricalQuote;
import yahoofinance.histquotes.Interval;

/**
 *
 * @author hereisalexius
 */
public class Form extends javax.swing.JFrame {

    JFileChooser fc;
    private final PropertyChangeSupport props = new PropertyChangeSupport(this);

    private String index;
    private Interval interval;
    private Calendar from;
    private Calendar to;

    private int predict;

    private int hiddenLayerSize;
    private int maxIterations;
    private double learningRate;
    private double maxError;

    private TransferFunctionType transferFunctionType;
    private LearningRule learningRule;

    private NeuralNetwork neuralNetwork;
    private Object lastobject = null;

    public Form() {
        fc = new JFileChooser();
        this.index = "DAX";
        this.interval = Interval.DAILY;
        this.from = Calendar.getInstance();
        this.to = Calendar.getInstance();
        this.from.add(Calendar.MONTH, -2);
        this.predict = 1;
        this.hiddenLayerSize = 9;
        this.maxIterations = 10000;
        this.maxError = 0.001;
        this.learningRate = 0.7;
        this.learningRule = new BackPropagation();
        this.transferFunctionType = TransferFunctionType.SIGMOID;
        neuralNetwork = new MultiLayerPerceptron(4, this.hiddenLayerSize, 1);
        initComponents();
        lastobject = new Object();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        indexField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        intervalsBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        fromDateField = new javax.swing.JFormattedTextField();
        toDateField = new javax.swing.JFormattedTextField();
        predictSpinner = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jSpinner3 = new javax.swing.JSpinner();
        jSpinner4 = new javax.swing.JSpinner();
        jSpinner5 = new javax.swing.JSpinner();
        jComboBox3 = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Finance index :");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${index}"), indexField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel2.setText("Interval :");

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${intervals}");
        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, intervalsBox);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${interval}"), intervalsBox, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        jLabel4.setText("Predict days count :");

        jLabel5.setText("From :");

        jLabel6.setText("To :");

        fromDateField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd.MM.yyyy"))));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${from.time}"), fromDateField, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        toDateField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd.MM.yyyy"))));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${to.time}"), toDateField, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        predictSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${predict}"), predictSpinner, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(predictSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .addComponent(toDateField)
                    .addComponent(intervalsBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fromDateField)
                    .addComponent(indexField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indexField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(intervalsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(predictSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(130, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Selection", jPanel1);

        jLabel7.setText("Hidden layer size : ");

        jLabel8.setText("Max iteration :");

        jLabel9.setText("Learning Rate :");

        jLabel10.setText("Max Error :");

        jLabel11.setText("Learning Algorytm :");

        jLabel12.setText("Activation Function :");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${functionTypes}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jComboBox2);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${transferFunctionType}"), jComboBox2, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${hiddenLayerSize}"), jSpinner3, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${maxIterations}"), jSpinner4, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        jSpinner5.setModel(new javax.swing.SpinnerNumberModel(0.1d, 0.0d, 1.0d, 1.0d));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${learningRate}"), jSpinner5, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${learningRulesNames}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jComboBox3);
        bindingGroup.addBinding(jComboBoxBinding);

        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${maxError}"), jTextField1, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextField1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTextField1InputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        jCheckBox1.setText("Randomize weights");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSpinner3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(51, 51, 51)
                        .addComponent(jSpinner4))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(45, 45, 45)
                        .addComponent(jSpinner5))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox3, 0, 177, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Neural Network", jPanel2);

        jMenu1.setText("File");

        jMenuItem2.setText("Save");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Open");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem1.setText("Calculate");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
        LearningRule lr = getLearningRules().get((String) jComboBox3.getSelectedItem());

        if (lr instanceof BackPropagation) {
            ((BackPropagation) neuralNetwork.getLearningRule()).setMaxIterations(maxIterations);
            ((BackPropagation) neuralNetwork.getLearningRule()).setMaxError(maxError);
            ((BackPropagation) neuralNetwork.getLearningRule()).setLearningRate(learningRate);

        } else if (lr instanceof LMS) {
            ((LMS) neuralNetwork.getLearningRule()).setMaxIterations(maxIterations);
            ((LMS) neuralNetwork.getLearningRule()).setMaxError(maxError);
            ((LMS) neuralNetwork.getLearningRule()).setLearningRate(learningRate);
        } else if (lr instanceof RBFLearning) {
            ((RBFLearning) neuralNetwork.getLearningRule()).setMaxIterations(maxIterations);
            ((RBFLearning) neuralNetwork.getLearningRule()).setMaxError(maxError);
            ((RBFLearning) neuralNetwork.getLearningRule()).setLearningRate(learningRate);
        } else if (lr instanceof MomentumBackpropagation) {
            ((MomentumBackpropagation) neuralNetwork.getLearningRule()).setMaxIterations(maxIterations);
            ((MomentumBackpropagation) neuralNetwork.getLearningRule()).setMaxError(maxError);
            ((MomentumBackpropagation) neuralNetwork.getLearningRule()).setLearningRate(learningRate);
        }

        setLearningRule(lr);
    }//GEN-LAST:event_jComboBox3ItemStateChanged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        setNeuralNetwork(new MultiLayerPerceptron(transferFunctionType, 4, this.hiddenLayerSize, 1));

        neuralNetwork.setLearningRule(learningRule);

        System.out.println(maxError);
        Stock stock = YahooFinance.get(index, from, to, interval);
        List<HistoricalQuote> history = stock.getHistory();
        Collections.reverse(history);
        List<Double[]> days = new ArrayList<>();

        for (HistoricalQuote hq : history) {
            double day = hq.getDate().get(Calendar.DAY_OF_MONTH);
            System.out.println(day);
            double month = hq.getDate().get(Calendar.MONTH);
            double year = hq.getDate().get(Calendar.YEAR);
            double close = hq.getAdjClose().doubleValue();
            days.add(new Double[]{day, month, year, close});
        }

        double max = 0;
        for (Double[] day : days) {
            if (day[3] > max) {
                max = day[3];
            }
        }

        System.out.println(days.size());

        System.out.println(max);

        double[] normalized = new double[days.size()];

        for (int i = 0; i < normalized.length; i++) {
            normalized[i] = days.get(i)[3] / max * 0.8 + 0.1;

        }
        DataSet dataSet = new DataSet(4, 1);
        double[] in = new double[4];
        double[] out = new double[1];
        for (int i = 0; i < normalized.length - 5; i++) {
            for (int j = i; j < i + 4; j++) {
                in[j - i] = normalized[j];
            }
            out[0] = normalized[i + 4];
            dataSet.addRow(in, out);
        }

        if (jCheckBox1.isSelected()) {
            neuralNetwork.randomizeWeights();
        }
        neuralNetwork.learn(dataSet);

        Double[] data = new Double[days.size() + predict];
        for (int i = 0; i < days.size(); i++) {
            data[i] = days.get(i)[3];

        }
//
//        List<String> time = new ArrayList<>();
//        for (Double[] day : days) {
//            time.add(day[0] + "." + day[1] + "." + day[2]);
//        }

        List<Double> pr = new ArrayList<>();
        for (int i = 0; i < predict; i++) {
            neuralNetwork.setInput(new double[]{
                days.get(days.size() - 1)[3] / max,
                days.get(days.size() - 2)[3] / max,
                days.get(days.size() - 3)[3] / max,
                days.get(days.size() - 4)[3] / max
            });

            neuralNetwork.calculate();
            days.add(new Double[]{days.get(days.size() - 1)[0] + 1, days.get(days.size() - 1)[1], days.get(days.size() - 1)[2], neuralNetwork.getOutput()[0] * max / 0.8 - 0.1});
            pr.add(neuralNetwork.getOutput()[0] * max / 0.8 - 0.1);
        }

//
        Double[] pdata = new Double[days.size()];
        for (int i = 0; i < days.size() - predict; i++) {
            pdata[i] = 0d;

        }

//
        for (int i = days.size() - predict; i < days.size(); i++) {
            pdata[i] = days.get(i)[3];
            data[i] = 0d;

        }
//
        List<String> ptime = new ArrayList<>();
        for (Double[] day : days) {
            ptime.add(day[0] + "." + day[1] + "." + day[2]);
        }
        JDialog dialog = new JDialog(this);

        // Create Chart
        // Create Chart
        Chart chart = new ChartBuilder().chartType(ChartType.Bar).width(800).height(600).title("XFactor vs. Age").xAxisTitle("Age").yAxisTitle("XFactor").build();
        chart.addSeries("real", ptime, Arrays.asList(data));
        chart.addSeries("prediction", ptime, Arrays.asList(pdata));

        chart.getStyleManager().setYAxisMin(5);
        chart.getStyleManager().setYAxisMax(70);

        XChartPanel cp = new XChartPanel(chart);
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        JPanel p = new JPanel(new FlowLayout());

        List<Double> result = new ArrayList<>();

        for (int i = days.size() - predict; i < days.size(); i++) {

            result.add(days.get(i)[3]);
            System.out.println(days.get(i)[3]);

        }

        JTable t = new JTable();
        DefaultTableModel dtm = (DefaultTableModel) t.getModel();

        for (int i = 0; i < result.size(); i++) {
            dtm.addRow(new Double[]{result.get(i)});
        }

        p.add(cp);
        p.add(t);
        dialog.setContentPane(p);
        dialog.pack();

        dialog.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jTextField1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextField1InputMethodTextChanged
        setMaxError(Double.parseDouble(jTextField1.getText()));
    }//GEN-LAST:event_jTextField1InputMethodTextChanged

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if (lastobject != null) {
            XStream stream = new XStream();
            String s = stream.toXML(this);
            fc = new JFileChooser();
            int r = fc.showSaveDialog(null);
            if (r == JFileChooser.APPROVE_OPTION) {
                try {
                    Files.write(fc.getSelectedFile().toPath(), Arrays.asList(s), StandardOpenOption.CREATE);
                } catch (IOException ex) {
                    Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        this.jMenuBar1.repaint();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if (lastobject != null) {
            XStream stream = new XStream();
            fc = new JFileChooser();
            int r = fc.showOpenDialog(this);
            if (r == JFileChooser.APPROVE_OPTION) {
                Form f = (Form) stream.fromXML(fc.getSelectedFile());
                f.setVisible(true);
                this.dispose();
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    public List<TransferFunctionType> getFunctionTypes() {
        List<TransferFunctionType> types = new ArrayList<>();
        types.add(TransferFunctionType.SIGMOID);
        types.add(TransferFunctionType.STEP);
        types.add(TransferFunctionType.TANH);
        types.add(TransferFunctionType.LOG);
        types.add(TransferFunctionType.LINEAR);
        types.add(TransferFunctionType.GAUSSIAN);
        types.add(TransferFunctionType.RAMP);
        types.add(TransferFunctionType.SGN);
        types.add(TransferFunctionType.SIN);
        types.add(TransferFunctionType.TRAPEZOID);

        return types;
    }

    public List<Interval> getIntervals() {
        List<Interval> intervals = new ArrayList<>();
        intervals.add(Interval.DAILY);
        intervals.add(Interval.WEEKLY);
        intervals.add(Interval.MONTHLY);
        return intervals;
    }

    public Map<String, LearningRule> getLearningRules() {
        Map<String, LearningRule> rules = new HashMap<>();
        rules.put("Back Propagation", new BackPropagation());
        rules.put("Quick Back Propagation", new MomentumBackpropagation());
        rules.put("LMS", new LMS());
        rules.put("RBF Learning", new RBFLearning());
        return rules;
    }

    public List<String> getLearningRulesNames() {
        List<String> n = new ArrayList<>();
        n.add("Back Propagation");
        n.add("Quick Back Propagation");
        n.add("LMS");
        n.add("RBF Learning");
        return n;
    }

    public String getIndex() {
        return index;
    }

    public void setIndex(String index) {
        String old = this.index;
        this.index = index;
        props.firePropertyChange("index", old, this.index);
    }

    public Interval getInterval() {
        return interval;
    }

    public void setInterval(Interval interval) {
        Interval old = this.interval;
        this.interval = interval;
        props.firePropertyChange("interval", old, this.interval);
    }

    public Calendar getFrom() {
        return from;
    }

    public void setFrom(Calendar from) {
        Calendar old = this.from;
        this.from = from;
        props.firePropertyChange("from", old, this.from);
    }

    public Calendar getTo() {
        return to;
    }

    public void setTo(Calendar to) {
        Calendar old = this.to;
        this.to = to;
        props.firePropertyChange("to", old, this.to);
    }

    public int getPredict() {
        return predict;
    }

    public void setPredict(int predict) {
        int old = this.predict;
        this.predict = predict;
        props.firePropertyChange("predict", old, this.predict);
    }

    public int getHiddenLayerSize() {
        return hiddenLayerSize;
    }

    public void setHiddenLayerSize(int hiddenLayerSize) {
        int old = this.hiddenLayerSize;
        this.hiddenLayerSize = hiddenLayerSize;
        props.firePropertyChange("hiddenLayerSize", old, this.hiddenLayerSize);
    }

    public int getMaxIterations() {
        return maxIterations;
    }

    public void setMaxIterations(int maxIterations) {
        int old = this.maxIterations;
        this.maxIterations = maxIterations;
        props.firePropertyChange("maxIterations", old, this.maxIterations);
    }

    public double getLearningRate() {
        return learningRate;
    }

    public void setLearningRate(double learningRate) {
        double old = this.learningRate;
        this.learningRate = learningRate;
        props.firePropertyChange("learningRate", old, this.learningRate);
    }

    public double getMaxError() {
        return maxError;
    }

    public void setMaxError(double maxError) {
        double old = this.maxError;
        this.maxError = maxError;
        props.firePropertyChange("maxError", old, this.maxError);
    }

    public TransferFunctionType getTransferFunctionType() {
        return transferFunctionType;
    }

    public void setTransferFunctionType(TransferFunctionType transferFunctionType) {
        TransferFunctionType old = this.transferFunctionType;
        this.transferFunctionType = transferFunctionType;
        props.firePropertyChange("transferFunctionType", old, this.transferFunctionType);
    }

    public LearningRule getLearningRule() {
        return learningRule;
    }

    public void setLearningRule(LearningRule learningRule) {
        LearningRule old = this.learningRule;
        this.learningRule = learningRule;
        props.firePropertyChange("learningRule", old, this.learningRule);
    }

    public NeuralNetwork getNeuralNetwork() {
        return neuralNetwork;
    }

    public void setNeuralNetwork(NeuralNetwork neuralNetwork) {
        NeuralNetwork old = this.neuralNetwork;
        this.neuralNetwork = neuralNetwork;
        props.firePropertyChange("neuralNetwork", old, this.neuralNetwork);
    }

    @Override
    public void addPropertyChangeListener(PropertyChangeListener l) {
        props.addPropertyChangeListener(l);
    }

    @Override
    public void addPropertyChangeListener(String propName, PropertyChangeListener l) {
        props.addPropertyChangeListener(propName, l);
    }

    @Override
    public void removePropertyChangeListener(PropertyChangeListener l) {
        props.removePropertyChangeListener(l);
    }

    @Override
    public void removePropertyChangeListener(String propName, PropertyChangeListener l) {
        props.removePropertyChangeListener(propName, l);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField fromDateField;
    private javax.swing.JTextField indexField;
    private javax.swing.JComboBox intervalsBox;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JSpinner jSpinner4;
    private javax.swing.JSpinner jSpinner5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JSpinner predictSpinner;
    private javax.swing.JFormattedTextField toDateField;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
